// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  image         String?
  role          UserRole        @default(STUDENT)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  enrolledIn    Course[]
  assessments   Assessment[]
  chats         Chat[]
  learningProfile LearningProfile?
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model LearningProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  learningStyle   String    @default("Visual Learner")
  preferences     String?   // JSON string in SQLite
  assessmentDate  DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  category    String       @default("Computer Science")
  chapters    Int          @default(1)
  duration    String       @default("10 hours")
  level       String       @default("Beginner")
  syllabus    Json?        // Store chapter content as JSON
  students    User[]
  assessments Assessment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Assessment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  students    User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isUser    Boolean  @default(true)
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}
