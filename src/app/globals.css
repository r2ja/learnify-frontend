@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,700;1,400;1,700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #EFEFEF;
  --foreground: #111827;
  --primary: #253439;
  --primary-hover: #1a272a;
  --primary-foreground: #f0f9ff;
  --secondary: #7c3aed;
  --secondary-foreground: #f5f3ff;
  --sidebar: #253439;
}

/* Vertical text for sidebar logo */
.writing-mode-vertical {
  writing-mode: vertical-rl;
  text-orientation: upright;
  letter-spacing: 0.2em;
}

html, 
body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  overflow-x: hidden;
  background: var(--background);
  color: var(--foreground);
  font-family: 'Inter', sans-serif;
}

/* Auth pages specific styling */
.auth-page {
  margin: 0;
  padding: 0;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
  display: flex;
}

/* Custom utility classes using regular CSS instead of @apply */
.btn-primary {
  background-color: var(--primary);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  transition: background-color 0.2s;
}

.btn-primary:hover {
  background-color: var(--primary-hover);
}

.btn-secondary {
  background-color: white;
  color: var(--primary);
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  border: 1px solid var(--primary);
  transition: background-color 0.2s;
}

.btn-secondary:hover {
  background-color: #f9fafb;
}

.card {
  background-color: white;
  padding: 1.5rem;
  border-radius: 0.75rem;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  transition: box-shadow 0.2s;
}

.card:hover {
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.font-playfair {
  font-family: 'Playfair Display', serif;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes float {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}

@keyframes float-slow {
  0% { transform: translateY(0px) translateX(0px); }
  25% { transform: translateY(-15px) translateX(10px); }
  50% { transform: translateY(0px) translateX(20px); }
  75% { transform: translateY(15px) translateX(10px); }
  100% { transform: translateY(0px) translateX(0px); }
}

@keyframes pulse-slow {
  0% { opacity: 0.03; }
  50% { opacity: 0.08; }
  100% { opacity: 0.03; }
}

@keyframes gradient-shift {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

@keyframes scaleIn {
  from { transform: scale(0.95); opacity: 0; }
  to { transform: scale(1); opacity: 1; }
}

@keyframes slideInRight {
  from { transform: translateX(30px); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

@keyframes slideInLeft {
  from { transform: translateX(-30px); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

/* Additional animations */
@keyframes ticker {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(-100%);
  }
}

/* Animation classes */
.animate-fadeIn {
  animation: fadeIn 0.8s ease-out forwards;
}

.animate-scaleIn {
  animation: scaleIn 0.5s ease-out forwards;
}

.animate-slideInRight {
  animation: slideInRight 0.5s ease-out forwards;
}

.animate-slideInLeft {
  animation: slideInLeft 0.5s ease-out forwards;
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-float-slow {
  animation: float-slow 18s ease-in-out infinite;
}

.animate-pulse-slow {
  animation: pulse-slow 8s ease-in-out infinite;
}

.animate-gradient-shift {
  animation: gradient-shift 15s ease infinite;
  background-size: 200% 200%;
}

/* Animation delays */
.animation-delay-100 {
  animation-delay: 100ms;
}

.animation-delay-200 {
  animation-delay: 200ms;
}

.animation-delay-300 {
  animation-delay: 300ms;
}

.animation-delay-400 {
  animation-delay: 400ms;
}

.animation-delay-500 {
  animation-delay: 500ms;
}

.animation-delay-600 {
  animation-delay: 600ms;
}

.animation-delay-700 {
  animation-delay: 700ms;
}

.animation-delay-800 {
  animation-delay: 800ms;
}

.animation-delay-900 {
  animation-delay: 900ms;
}

.animation-delay-1000 {
  animation-delay: 1000ms;
}

.animation-delay-1500 {
  animation-delay: 1500ms;
}

.animation-delay-2000 {
  animation-delay: 2000ms;
}

.animation-delay-3000 {
  animation-delay: 3000ms;
}

/* Dashboard specific styles */
.dashboard-card {
  background: white;
  border-radius: 1rem;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
  transition: all 0.3s ease;
}

.dashboard-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Improved responsive spacing */
.container {
  max-width: 1280px;
  margin: 0 auto;
}

@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

/* Add this class for use in hover states */
.hover\:paused:hover {
  animation-play-state: paused;
}

/* Hide Mermaid error SVGs that appear with "Syntax error in text" */
svg text[id^="mermaidChart"] {
  display: none !important;
}

svg text[id^="mermaid-"] {
  display: none !important;
}

svg g[class*="flowchart-error"] {
  display: none !important;
}

svg g[class*="error-icon"] {
  display: none !important;
}

svg g[class*="error-text"] {
  display: none !important;
}

/* Add a neutral background to syntax error SVGs */
svg.mermaid[style*="background-color: rgb(51"] {
  background-color: #f8f9fa !important;
  color: transparent !important;
  height: 0 !important;
  min-height: 0 !important;
  overflow: hidden !important;
}

/* More aggressive rules to completely hide Mermaid errors */
/* Hide ALL SVGs with mermaid version text */
svg text:not([class]):not([id]) {
  display: none !important;
  visibility: hidden !important;
}

/* Hide any SVG that contains the text "Syntax error in text" */
svg:has(text:contains("Syntax error")) {
  height: 0 !important;
  width: 0 !important;
  overflow: hidden !important;
  opacity: 0 !important;
  position: absolute !important;
  z-index: -1 !important;
  visibility: hidden !important;
}

/* Hide any group that might contain error messages */
svg g[class*="error"], 
svg g[class*="syntax"], 
svg g:has(text:contains("error")),
svg g:has(text:contains("mermaid version")) {
  display: none !important;
  visibility: hidden !important;
}

/* Force the main diagram container's size to zero if it contains errors */
.mermaid-diagram:has(svg text:contains("Syntax error")) {
  height: 0 !important;
  overflow: hidden !important;
  margin: 0 !important;
  padding: 0 !important;
}

/* Browser-compatible selectors that will work everywhere */
svg {
  max-height: 500px; /* Allow legitimate diagrams */
}

/* Target error messages directly - these don't use modern selectors */
svg text[dominant-baseline="text-before-edge"] {
  display: none !important;
}

svg text[y="0"] {
  display: none !important;
}

svg[height="100%"][width="100%"] {
  max-height: 0 !important;
  overflow: hidden !important;
}

/* Target by specific text content approach */
#mermaid-error-common,
#mermaid-error-message,
.error-text,
.error-icon {
  display: none !important;
}

/* Hide error SVGs completely */
svg[style*="rgb(51, 0, 0)"] {
  height: 0 !important;
  width: 0 !important;
  position: absolute !important;
  overflow: hidden !important;
  opacity: 0 !important;
  pointer-events: none !important;
}
